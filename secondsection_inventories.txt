Continuing from the basic ESX script tutorial, let's dive into implementing more advanced features like **inventories** and a **new phone system**. This will help expand your script and give you a deeper understanding of how to work with ESX in FiveM.

### **Step 7: Implementing an Inventory System**

The ESX Framework has a built-in inventory system, but you might want to create a custom inventory or modify the existing one. Here's how you can create a basic custom inventory system or integrate with the existing one.

#### **1. Custom Inventory System**

You can create a custom inventory system by defining items and their properties, managing item pickups, and adding a simple UI.

1. **Define Items in `server.lua`:**

   In the server script, we can create a basic inventory table that stores items for each player. This will be stored as a part of each player's data.

   ```lua
   local playerInventory = {}

   -- Define a function to add items to the player's inventory
   function addItemToInventory(playerId, item, count)
       if not playerInventory[playerId] then
           playerInventory[playerId] = {}
       end

       if not playerInventory[playerId][item] then
           playerInventory[playerId][item] = 0
       end

       playerInventory[playerId][item] = playerInventory[playerId][item] + count
   end

   -- Define a function to get the player's inventory
   function getPlayerInventory(playerId)
       return playerInventory[playerId] or {}
   end

   -- Listen for client events to add items
   RegisterServerEvent('my_script:addItem')
   AddEventHandler('my_script:addItem', function(item, count)
       local playerId = source
       addItemToInventory(playerId, item, count)
       TriggerClientEvent('my_script:refreshInventory', playerId, getPlayerInventory(playerId))
   end)
   ```

2. **Adding Inventory Interaction on the Client Side (`client.lua`):**

   You can now implement a simple UI to show the player's inventory. When the player presses a button (like **I**), you can display their inventory.

   ```lua
   local inventoryOpen = false

   -- Define a function to open the inventory
   function openInventory()
       if inventoryOpen then
           inventoryOpen = false
           SendNUIMessage({ action = 'closeInventory' })
       else
           inventoryOpen = true
           local playerId = PlayerPedId()
           TriggerServerEvent('my_script:getInventory', playerId)
       end
   end

   -- Listen for inventory refresh
   RegisterNetEvent('my_script:refreshInventory')
   AddEventHandler('my_script:refreshInventory', function(inventory)
       SendNUIMessage({ action = 'updateInventory', inventory = inventory })
   end)

   -- Bind the openInventory function to the 'I' key
   Citizen.CreateThread(function()
       while true do
           Citizen.Wait(0)
           if IsControlJustPressed(1, 244) then -- **I** key
               openInventory()
           end
       end
   end)
   ```

3. **Create a Basic Inventory UI with HTML/CSS (NUI):**

   The inventory UI will be built using HTML, CSS, and JavaScript. Here's a simple structure:

   * **inventory.html** (located in your `html/` folder):

     ```html
     <div id="inventory" style="display: none;">
         <h2>Player Inventory</h2>
         <div id="items"></div>
         <button onclick="closeInventory()">Close</button>
     </div>

     <script>
         window.addEventListener('message', function(event) {
             if (event.data.action === 'updateInventory') {
                 const inventory = event.data.inventory;
                 let itemsHTML = '';
                 for (const item in inventory) {
                     itemsHTML += `<div>${item}: ${inventory[item]}</div>`;
                 }
                 document.getElementById('items').innerHTML = itemsHTML;
             }
         });

         function closeInventory() {
             fetch(`https://${GetParentResourceName()}/closeInventory`, {
                 method: 'POST',
             });
         }
     </script>
     ```

   * **inventory.css** (styling the inventory UI):

     ```css
     #inventory {
         position: fixed;
         top: 50%;
         left: 50%;
         transform: translate(-50%, -50%);
         background-color: rgba(0, 0, 0, 0.8);
         color: white;
         padding: 20px;
         border-radius: 10px;
     }
     ```

4. **Add NUI Callbacks:**

   In the `client.lua`, you'll need to handle NUI communication and ensure that the UI is interactive.

   ```lua
   RegisterNUICallback('closeInventory', function()
       SetNuiFocus(false, false)
   end)

   RegisterNUICallback('openInventory', function()
       SetNuiFocus(true, true)
       TriggerServerEvent('my_script:getInventory', PlayerPedId())
   end)
   ```

#### **2. Integrating with ESX Inventory System**

If you'd prefer to use the built-in ESX inventory system, you can call ESX’s API to manage the inventory. Here's an example:

```lua
local ESX = nil
TriggerEvent('esx:getSharedObject', function(obj) ESX = obj end)

-- Add item to the player's inventory
RegisterServerEvent('my_script:addItemESX')
AddEventHandler('my_script:addItemESX', function(item, count)
    local xPlayer = ESX.GetPlayerFromId(source)
    xPlayer.addInventoryItem(item, count)
end)
```

---

### **Step 8: Implementing a New Phone System**

A phone system is a great way to give your server a unique feature. Here's a basic framework for creating a simple phone system for your ESX server.

1. **Create the Phone System Structure**

   * **Server-Side Logic (server.lua):**

     You need to manage the phone’s state, messages, and calls.

     ```lua
     local playerPhones = {}

     -- Create a phone for the player
     RegisterServerEvent('my_script:createPhone')
     AddEventHandler('my_script:createPhone', function()
         local xPlayer = ESX.GetPlayerFromId(source)
         playerPhones[source] = { messages = {}, contacts = {} }
         TriggerClientEvent('my_script:phoneCreated', source)
     end)

     -- Add a message to the player's phone
     RegisterServerEvent('my_script:addMessage')
     AddEventHandler('my_script:addMessage', function(contact, message)
         local xPlayer = ESX.GetPlayerFromId(source)
         table.insert(playerPhones[source].messages, { contact = contact, message = message })
         TriggerClientEvent('my_script:receiveMessage', source, contact, message)
     end)
     ```

2. **Client-Side Phone Interface (client.lua)**

   You’ll need to handle the UI of the phone and let the player navigate through messages and contacts.

   ```lua
   local phoneOpen = false

   function openPhone()
       if phoneOpen then
           phoneOpen = false
           SendNUIMessage({ action = 'closePhone' })
       else
           phoneOpen = true
           TriggerServerEvent('my_script:getPhoneMessages')
       end
   end

   RegisterNetEvent('my_script:receiveMessage')
   AddEventHandler('my_script:receiveMessage', function(contact, message)
       -- Display received message on phone UI
       SendNUIMessage({ action = 'newMessage', contact = contact, message = message })
   end)

   -- Bind phone interface open/close to a key
   Citizen.CreateThread(function()
       while true do
           Citizen.Wait(0)
           if IsControlJustPressed(1, 244) then -- **P** key for phone
               openPhone()
           end
       end
   end)
   ```

3. **Create Phone UI (NUI)**

   Here's how you can structure the phone UI with HTML:

   ```html
   <div id="phone" style="display: none;">
       <h2>Phone</h2>
       <div id="contacts"></div>
       <div id="messages"></div>
       <button onclick="closePhone()">Close</button>
   </div>

   <script>
       window.addEventListener('message', function(event) {
           if (event.data.action === 'newMessage') {
               const messageHTML = `<div>${event.data.contact}: ${event.data.message}</div>`;
               document.getElementById('messages').innerHTML += messageHTML;
           }
       });

       function closePhone() {
           fetch(`https://${GetParentResourceName()}/closePhone`, {
               method: 'POST',
           });
       }
   </script>
   ```

   * Use CSS for styling the phone UI, similar to the inventory UI styling.

---

### **Conclusion**

By now, you should have a basic understanding of how to integrate an inventory and phone system into your ESX framework for FiveM. These are just starting points, and you can expand them by adding more advanced features like customizing the phone UI, integrating an economy with item use, or adding more complex phone functionality like calling and messaging systems.

Let me know if you need further assistance my discord is Crypticwisdom99
